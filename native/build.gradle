// see https://github.com/TheInfiniteKind/appbundler

apply plugin: 'java'

task getXCrun(type: Exec) {
    commandLine "xcrun"
    args "--show-sdk-path"
    standardOutput = new ByteArrayOutputStream()
    ext.run = { return standardOutput.toString().trim() }
}

def compileNativeStarter = { LIBJLI_DY_LIB, javahome, outputFile, List architectures ->

	def compileNative = project.tasks.create( [name: "compileNative-" + UUID.randomUUID(), type: Exec ] ) {
	    workingDir "."
    	commandLine "/usr/bin/gcc"
    	outputs.file( outputFile )

		args "-v"
		
		for( String arch : architectures ) {
	        args "-arch"
	        args arch
		}
		
        args "-I"
        args "${javahome}/include"
        args "-I"
        args "${javahome}/include/darwin"
        args "-DLIBJLI_DYLIB=\"${LIBJLI_DY_LIB}\""
        args "-framework"
        args "Cocoa"
        args "-F"
        args "${javahome}/../.."
        args "-isysroot"
        args "${getXCrun.run()}"
        args "-mmacosx-version-min=10.7"
        args "-fobjc-exceptions"
        args "-std=c99"
        args "-o"
        args outputFile
        args "main.m"
	}

	compileNative.exec()
	outputFile.setExecutable( true, false)
	println "Copying '${outputFile}' to destination"
	copy {
	    from( outputFile )
	    into('../src/com/oracle/appbundler')
	}
}

task createNativeStarter {

    dependsOn getXCrun

    doLast {

		file("${buildDir}").mkdirs()

        def javahome = System.getProperty( "java.home" )
        def javahomeJRE = javahome;
        
        if ( file("${javahomeJRE}/../jre").exists() ) {
        	javahomeJRE += "/../jre";
        }
        
        def LIBJLI_DY_LIB="${javahomeJRE}/lib/libjli.dylib"
        if ( !file(LIBJLI_DY_LIB).exists() ) {
			LIBJLI_DY_LIB="${javahomeJRE}/lib/jli/libjli.dylib"
        }

        println "JAVA_HOME: ${javahome}";
        println "JAVA_HOME_JRE: ${javahomeJRE}";
        println "LIBJLI_DY_LIB: ${LIBJLI_DY_LIB}";

		println "Creating JavaAppLauncher"
	    def outputFile = new File( "${buildDir}", "JavaAppLauncher" )
    	compileNativeStarter LIBJLI_DY_LIB, javahome, outputFile, [ 'x86_64', 'arm64' ]

		println "Creating JavaAppLauncher_x86_64"
	    def outputFileX86 = new File( "${buildDir}", "JavaAppLauncher_x86_64" )
    	compileNativeStarter LIBJLI_DY_LIB, javahome, outputFileX86, [ 'x86_64' ]
    }
}

defaultTasks = ["clean", "createNativeStarter"]